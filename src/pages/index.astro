---
import Layout from '@layouts/Layout.astro'

const frontmatter = {"title": "Toki Pona Phrase Frequency"}
---

<script>
import type { WorkerHttpvfs } from "sql.js-httpvfs";
import type {Length} from "@utils/input"
import Chart from "chart.js/auto";

import { initDB } from "@utils/sqlite"
import { inputToQueries } from "@utils/input";
import { rebuild_chart } from "@utils/chart";
import { fetchManyOccurrenceSet } from "@utils/search";
import type { Row } from '@utils/search';
import {DB_URL} from '@utils/constants';

const urlParams = new URLSearchParams(window.location.search)
const queryParam = urlParams.get('query');
const minLenParam = urlParams.get('minlen') || '';
const relAbsParam = urlParams.get('relabs')

const SAMPLE_SEARCHES = [
  // duh
  "toki, pona, toki pona",
  // phrase trends
  "tomo tawa, ilo tawa",
  // semantically identical words
  "lukin, oko, lukin + oko",
  "ale, ali, ale + ali",
  "ala, x, ala + x",
  "anu, y, anu + y",
  // word groups
  "laso, loje, walo, jelo, pimeja",
  "soweli, waso, kala, akesi, pipi",
  "sewi, poka, anpa, sinpin, monsi",
  "meli, mije, tonsi",
  "pu, ku, su",
  "sin, lukin, kin, namako, oko",
  // modifier usage
  "wawa a, wawa mute, wawa suli, wawa sewi",
  "tenpo ni, tenpo pini, tenpo kama, tenpo mute, tenpo suli, tenpo poka",
  // grammatical things
  "kepeken ilo, kepeken e ilo",
  "kin la, poka la, sama la, namako la",
  "ale la, ala la",
  // names
  "kekan, kekan san, jan kekan, mun kekan",
  "sonja, jan sonja",
];

const SAMPLE_SENTLENS = ["1", "2"];

const REL_ABS_OPTS = ["absolute", "relative"];

function getInitialParams() {
  let searchTerm: string;
  let minSentLen: string;
  let relAbs: string;

  let parsed = parseInt(minLenParam, 10);

  if (queryParam) {
    searchTerm = queryParam
  } else {
    searchTerm = SAMPLE_SEARCHES[Math.floor(Math.random() * SAMPLE_SEARCHES.length)];
  }

  if (parsed && 1 <= parsed && parsed <= 6) {
    minSentLen = minLenParam;
  }  else {
    minSentLen = SAMPLE_SENTLENS[Math.floor(Math.random() * SAMPLE_SENTLENS.length)];
  }

  if (relAbsParam && REL_ABS_OPTS.includes(relAbsParam)) {
    relAbs = relAbsParam;
  } else {
    relAbs = REL_ABS_OPTS[Math.floor(Math.random() * REL_ABS_OPTS.length)];
  }

  return {searchTerm, minSentLen, relAbs};


}

async function manipForUserRequest(
  worker: WorkerHttpvfs,
  canvas: HTMLCanvasElement,
  searchBox: HTMLInputElement,
  sentLenDropdown: HTMLInputElement,
  relAbsDropdown: HTMLInputElement,
) {
    const queryText = searchBox.value;
    const sentLen = Number(sentLenDropdown.value) as Length;
    const relative = relAbsDropdown.value === "relative";

    let queries = await userRequest(worker, canvas, queryText, sentLen, relative);
}

async function userRequest(
  worker: WorkerHttpvfs,
  canvas: HTMLCanvasElement,
  input: string,
  min_sent_len: Length,
  relative: boolean,
) {
  const queries = inputToQueries(input, min_sent_len);
  if (queries.length === 0) {
    return;
  }

  const results = await fetchManyOccurrenceSet(
    worker,
    queries,
    relative,
  );
  if (results.length === 0) {
    // TODO: tell user nothing came back
    return;
  }
  if (results.length < queries.length) {
    // TODO: tell user some (which) words were not found
  }

  await rebuild_chart(canvas, results);
  return queries;
}

document.addEventListener("DOMContentLoaded", async () => {
  const searchBox = document.getElementById("searchBox")! as HTMLInputElement;
  const sentLenDropdown = document.getElementById(
    "sentLenDropdown",
  )! as HTMLInputElement;
  const relAbsDropdown = document.getElementById(
    "relAbsDropdown",
  )! as HTMLInputElement;

  let initialParams = getInitialParams()
  searchBox.value = initialParams.searchTerm
  sentLenDropdown.value = initialParams.minSentLen
  relAbsDropdown.value = initialParams.relAbs

  const usageCanvas = document.getElementById("usage")! as HTMLCanvasElement;
  const worker = await initDB(DB_URL)

  // TODO: reintroduce
  // const resetZoomButton = document.getElementById(
  //   "resetZoom",
  // )! as HTMLInputElement;
  // resetZoomButton.addEventListener("click", () => {
  //   usageChart.resetZoom();
  // });
  await manipForUserRequest(worker, usageCanvas, searchBox, sentLenDropdown, relAbsDropdown)

  const form = document.getElementById("usageForm")! as HTMLFormElement;
  form.addEventListener("change", async () => {
    // @ts-ignore
    await manipForUserRequest(worker, usageCanvas, searchBox, sentLenDropdown, relAbsDropdown)
  });
});
</script>

<Layout frontmatter={frontmatter}>
  <div>
    <form id="usageForm" onsubmit="return false;" autocomplete="off">
      <div>
        <label for="searchBox"></label>
        <input
          type="text"
          id="searchBox"
          spellcheck="false"
          style="width: 65%; height: 1.6em; font-size: 18px"
        />
      </div>

      <div>
        <select id="sentLenDropdown" value="1">
          <option value="1">All sentences</option>
          <option value="2">2+ words per sentence</option>
          <option value="3">3+ words per sentence</option>
          <option value="4">4+ words per sentence</option>
          <option value="5">5+ words per sentence</option>
          <option value="6">6+ words per sentence</option>
        </select>

        <select id="relAbsDropdown" value="absolute">
          <option value="absolute">Absolute</option>
          <option value="relative">Relative</option>
        </select>
      </div>
    </form>
  </div>

  <div style="position: relative">
    <input
      type="button"
      id="resetZoom"
      value="Reset Zoom"
      style="position: absolute; top: -4.5em; right: 1em"
    />
    <div>
      <canvas id="usage" style="width: 100%; margin-top: 0.25em"></canvas>
    </div>
    <div id="usageLegend" style="height: 6em; margin-top: 0.75em;"></div>
  </div>
</Layout>
