---
import Layout from "@layouts/Layout.astro";
import EpochRangePicker from "@components/EpochRangePicker.astro";
import Loader from "@components/Loader.astro";
import LenDropdown from "@components/LenDropdown.astro";
import { EARLIEST_YEAR, LATEST_YEAR } from "@utils/constants";

const frontmatter = { title: "ilo Muni" };
---

<script>
  import type { Length, Scale, Query } from "@utils/types";
  import { inputToQueries } from "@utils/input";
  import { reloadUsageChart } from "@utils/chart";
  import { fetchManyOccurrenceSet } from "@utils/sqlite";

  import { getSearchParams, toURLParams } from "@utils/urlparams";
  import { SMOOTHABLE } from "@utils/constants";

  async function updatePage(
    canvas: HTMLCanvasElement,
    searchBox: HTMLInputElement,
    sentLenDropdown: HTMLInputElement,
    scaleDropdown: HTMLInputElement,
    smoothingDropdown: HTMLInputElement,
    startDropdown: HTMLInputElement,
    endDropdown: HTMLInputElement,
    loader: HTMLSpanElement,
  ) {
    const queryText = searchBox.value;
    const sentLen = Number(sentLenDropdown.value) as Length;
    const scale = scaleDropdown.value as Scale;
    const smoothing = Number(smoothingDropdown.value);
    const start = Number(startDropdown.value);
    const end = Number(endDropdown.value);

    // disable smoothness if absolute is set
    // graphing absolute data with smoothness is silly
    if (SMOOTHABLE.includes(scale)) {
      smoothingDropdown.disabled = false;
    } else {
      smoothingDropdown.disabled = true;
    }

    loader.style.visibility = "visible";
    let queries = await updateChart(
      canvas,
      queryText,
      sentLen,
      scale,
      smoothing,
      start,
      end,
    );
    loader.style.visibility = "hidden";
    if (!queries) {
      return; // TODO: inform user they failed to query
    }

    // rewrite urlParams with query repr so we don't copy user input error
    let queryReprs = queries.map((query: Query) => query.repr);
    let query = queryReprs.join(", ");
    // the space is technically wasteful but looks better

    let usedParams: Record<string, string> = {
      query: query,
      minSentLen: sentLenDropdown.value,
      scale: scaleDropdown.value,
      start: startDropdown.value,
      end: endDropdown.value,
    };

    if (scale !== "absolute") {
      usedParams.smoothing = smoothingDropdown.value;
    }

    toURLParams(usedParams);
  }

  async function updateChart(
    canvas: HTMLCanvasElement,
    input: string,
    minSentLen: Length,
    scale: Scale,
    smoothing: number,
    start: number,
    end: number,
  ) {
    const { queries, errors } = await inputToQueries(input, minSentLen);
    if (queries.length === 0) {
      return;
    }

    const results = await fetchManyOccurrenceSet(
      queries,
      scale,
      smoothing,
      start,
      end,
    );
    if (results.length === 0) {
      // TODO: tell user nothing came back
      return;
    }
    if (results.length < queries.length) {
      // TODO: tell user some (which) words were not found
    }

    await reloadUsageChart(canvas, results);
    return queries;
  }

  document.addEventListener("DOMContentLoaded", async () => {
    const searchBox = document.getElementById("searchBox")! as HTMLInputElement;
    const sentLenDropdown = document.getElementById(
      "sentLenDropdown",
    )! as HTMLInputElement;
    const scaleDropdown = document.getElementById(
      "scaleDropdown",
    )! as HTMLInputElement;
    const smoothingDropdown = document.getElementById(
      "smoothingDropdown",
    )! as HTMLInputElement;
    const startDropdown = document.getElementById(
      "startDropdown",
    )! as HTMLInputElement;
    const endDropdown = document.getElementById(
      "endDropdown",
    )! as HTMLInputElement;

    const loader = document.getElementById("loader")! as HTMLSpanElement;

    let initialParams = getSearchParams();
    // aside from query which starts empty, allow defaults of form
    searchBox.value = initialParams.query;
    if (initialParams.minSentLen) {
      sentLenDropdown.value = initialParams.minSentLen;
    }
    if (initialParams.scale) {
      scaleDropdown.value = initialParams.scale;
    }
    if (initialParams.smoothing) {
      smoothingDropdown.value = initialParams.smoothing;
    }
    if (initialParams.start) {
      startDropdown.value = initialParams.start;
    }
    if (initialParams.end) {
      endDropdown.value = initialParams.end;
    }

    const usageCanvas = document.getElementById("usage")! as HTMLCanvasElement;
    await updatePage(
      usageCanvas,
      searchBox,
      sentLenDropdown,
      scaleDropdown,
      smoothingDropdown,
      startDropdown,
      endDropdown,
      loader,
    );

    const form = document.getElementById("usageForm")! as HTMLFormElement;
    form.addEventListener("change", async () => {
      await updatePage(
        usageCanvas,
        searchBox,
        sentLenDropdown,
        scaleDropdown,
        smoothingDropdown,
        startDropdown,
        endDropdown,
        loader,
      );
    });
  });
</script>

<Layout frontmatter={frontmatter}>
  <div>
    <form id="usageForm" onsubmit="return false;" autocomplete="off">
      <div>
        <input
          type="text"
          id="searchBox"
          spellcheck="false"
          style="width: 65%; height: 1.6em; font-size: 18px; margin-right: 0.4em;"
        />
        <Loader id="loader" />
      </div>

      <div>
        <LenDropdown
          maxLength={6}
          singularText="All sentences"
          pluralText="+ words per sentence"
          id="sentLenDropdown"
        />

        <select id="scaleDropdown">
          <optgroup label="simple">
            <option value="abs">Absolute</option>
            <option value="rel" selected={true}>Relative</option>
            <option value="cmsum">Cumulative</option>
          </optgroup>
          <optgroup label="useful">
            <option value="logrel">Relative Log</option>
            <option value="normrel">Relative Minmax</option>
            <option value="normabs">Absolute Minmax</option>
          </optgroup>
          <optgroup label="weird or dupe">
            <option value="logabs">Absolute Log</option>
            <option value="relentropy">Relative Entropy</option>
            <option value="entropy">Absolute Entropy</option>
            <option value="zscore">Relative Z-Score</option>
            <option value="deriv1">Absolute 1st Deriv</option>
            <!-- <option value="deriv2">2nd Deriv Absolute</option> -->
            <option value="relderiv1">Relative 1st Deriv</option>
            <!-- <option value="relderiv2">2nd Deriv Relative</option> -->
          </optgroup>
        </select>

        <select id="smoothingDropdown">
          {
            Array.from({ length: 10 }, (_, i) => (
              <option value={i} selected={i === 2}>
                {i} smoothing
              </option>
            ))
          }
          {
            Array.from({ length: 5 }, (_, i) => (
              <option value={(i + 1) * 10}>{(i + 1) * 10} smoothing</option>
            ))
          }
        </select>
        <EpochRangePicker
          startYear={EARLIEST_YEAR}
          endYear={LATEST_YEAR}
          startValueYear={2016}
          startId="startDropdown"
          endId="endDropdown"
          renderAs="date"
        />
      </div>
    </form>
  </div>

  <div style="position: relative">
    <canvas
      id="usage"
      style="width: 100%; margin-top: 0.25em; max-height: 30em;"></canvas>
    <div id="usageLegend" style="height: 6em; margin-top: 0.75em;"></div>
  </div>

  <div id="errorBin"></div>
</Layout>
