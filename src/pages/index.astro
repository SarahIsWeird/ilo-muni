---
import Layout from "@layouts/Layout.astro";

const frontmatter = { title: "ilo Muni" };
---

<script>
  import type {
    Length,
    SearchURLParams,
    MinSentLen,
    Scale,
    Smoothing,
  } from "@utils/input";

  import { inputToQueries } from "@utils/input";
  import { rebuild_chart } from "@utils/chart";
  import { fetchManyOccurrenceSet } from "@utils/search";

  const SAMPLE_SEARCHES = [
    // duh
    "toki, pona, toki pona",
    // phrase trends
    "tomo tawa, ilo tawa",
    "sina seme, sina pilin seme, sina pali e seme",
    // isolating phrases
    "toki_1 - toki_2, pona_1 - pona_2",
    // synonyms
    "lukin, oko, lukin + oko",
    "ale, ali, ale + ali",
    "ala, x, ala + x",
    "anu, y, anu + y",
    // word groups
    "laso, loje, walo, jelo, pimeja",
    "soweli, waso, kala, akesi, pipi",
    "sewi, poka, anpa, sinpin, monsi",
    "meli, mije, tonsi",
    "pu, ku, su",
    "sin, lukin, kin, namako, oko",
    "selo, sijelo",
    // modifier usage
    "wawa a, wawa mute, wawa suli, wawa sewi",
    "tenpo ni, tenpo pini, tenpo kama, tenpo mute, tenpo suli, tenpo poka",
    // grammatical things
    "kepeken ilo, kepeken e ilo",
    "kin la, poka la, sama la, namako la",
    "ale la, ala la",
    "pali e, lon e, mama e, kama e",
    // names
    "kekan, kekan san, jan kekan, mun kekan",
    "sonja, jan sonja",
    // disambiguation
    "san - kekan san",
    "toki - toki pona",
  ];

  const SCALE_OPTS = ["absolute", "relative"];

  function disableWhenAbsolute(
    scaleDropdown: HTMLInputElement,
    smoothingDropdown: HTMLInputElement,
  ) {
    if (scaleDropdown.value === "relative") {
      smoothingDropdown.disabled = false;
    } else {
      smoothingDropdown.disabled = true;
    }
  }

  function randomElem(arr: any[]) {
    return arr[Math.floor(Math.random() * arr.length)];
  }

  function getInitialParams(): SearchURLParams {
    const urlParams = new URLSearchParams(window.location.search);

    const queryParam = urlParams.get("query");
    const minLenParam = urlParams.get("minSentLen") || "";
    const scaleParam = urlParams.get("scale");
    const smoothingParam = urlParams.get("smoothing") || "";

    let query: string;
    let minSentLen: MinSentLen;
    let scale: Scale;
    let smoothing: Smoothing;

    let parsedMinLen = parseInt(minLenParam, 10);
    let parsedSmoothing = parseInt(smoothingParam, 10);

    // TODO: double check all of these  against type

    if (queryParam) {
      query = queryParam;
    } else {
      query = randomElem(SAMPLE_SEARCHES);
    }

    if (parsedMinLen && 1 <= parsedMinLen && parsedMinLen <= 6) {
      minSentLen = minLenParam as MinSentLen;
    } else {
      minSentLen = "1";
    }

    if (scaleParam && SCALE_OPTS.includes(scaleParam)) {
      scale = scaleParam as Scale;
    } else {
      scale = "relative";
    }

    if (smoothingParam && parsedSmoothing >= 0) {
      smoothing = smoothingParam as Smoothing;
    } else {
      smoothing = "2"; // TODO: default smoothing
    }

    return { query, minSentLen, scale, smoothing };
  }

  function toUrlParams(params: SearchURLParams) {
    const urlParams = new URLSearchParams();

    for (const key in params) {
      // @ts-ignore
      if (params[key]) {
        //@ts-ignore
        urlParams.append(key, params[key]);
      }
    }

    const newUrl = `${window.location.pathname}?${urlParams.toString()}`;
    window.history.replaceState({}, "", newUrl);
  }

  async function manipForUserRequest(
    canvas: HTMLCanvasElement,
    searchBox: HTMLInputElement,
    sentLenDropdown: HTMLInputElement,
    scaleDropdown: HTMLInputElement,
    smoothingDropdown: HTMLInputElement,
  ) {
    const queryText = searchBox.value;
    const sentLen = Number(sentLenDropdown.value) as Length;
    const relative = scaleDropdown.value === "relative";
    const smoothing = Number(smoothingDropdown.value);

    let queries = await userRequest(
      canvas,
      queryText,
      sentLen,
      relative,
      smoothing,
    );
    if (!queries) {
      return;
    }

    // rewrite urlParams with query repr so we don't copy user input error
    let queryReprs = queries.map((query) => query.repr);
    let query = queryReprs.join(", ");

    let urlParams: SearchURLParams = {
      query: query,
      minSentLen: sentLenDropdown.value as MinSentLen,
      scale: scaleDropdown.value as Scale,
      smoothing: smoothingDropdown.value as Smoothing,
    };

    toUrlParams(urlParams);
  }

  async function userRequest(
    canvas: HTMLCanvasElement,
    input: string,
    min_sent_len: Length,
    relative: boolean,
    smoothing: number,
  ) {
    const queries = inputToQueries(input, min_sent_len);
    if (queries.length === 0) {
      return;
    }

    const results = await fetchManyOccurrenceSet(queries, relative, smoothing);
    if (results.length === 0) {
      // TODO: tell user nothing came back
      return;
    }
    if (results.length < queries.length) {
      // TODO: tell user some (which) words were not found
    }

    await rebuild_chart(canvas, results);
    return queries;
  }

  document.addEventListener("DOMContentLoaded", async () => {
    const searchBox = document.getElementById("searchBox")! as HTMLInputElement;
    const sentLenDropdown = document.getElementById(
      "sentLenDropdown",
    )! as HTMLInputElement;
    const scaleDropdown = document.getElementById(
      "scaleDropdown",
    )! as HTMLInputElement;
    const smoothingDropdown = document.getElementById(
      "smoothingDropdown",
    )! as HTMLInputElement;

    let initialParams = getInitialParams();
    searchBox.value = initialParams.query;
    sentLenDropdown.value = initialParams.minSentLen;
    scaleDropdown.value = initialParams.scale;
    smoothingDropdown.value = initialParams.smoothing;

    disableWhenAbsolute(scaleDropdown, smoothingDropdown);

    const usageCanvas = document.getElementById("usage")! as HTMLCanvasElement;

    await manipForUserRequest(
      usageCanvas,
      searchBox,
      sentLenDropdown,
      scaleDropdown,
      smoothingDropdown,
    );

    const form = document.getElementById("usageForm")! as HTMLFormElement;
    form.addEventListener("change", async () => {
      // @ts-ignore
      await manipForUserRequest(
        usageCanvas,
        searchBox,
        sentLenDropdown,
        scaleDropdown,
        smoothingDropdown,
      );
    });

    form.addEventListener("change", () => {
      disableWhenAbsolute(scaleDropdown, smoothingDropdown);
    });
  });
</script>

<Layout frontmatter={frontmatter}>
  <div>
    <form id="usageForm" onsubmit="return false;" autocomplete="off">
      <div>
        <label for="searchBox"></label>
        <input
          type="text"
          id="searchBox"
          spellcheck="false"
          style="width: 65%; height: 1.6em; font-size: 18px"
        />
      </div>

      <div>
        <select id="sentLenDropdown" value="1">
          <option value="1">All sentences</option>
          {
            Array.from({ length: 5 }, (_, i) => (
              <option value={i + 2}>{i + 2}+ words per sentence</option>
            ))
          }
        </select>

        <select id="scaleDropdown" value="relative">
          <option value="absolute">Absolute</option>
          <option value="relative">Relative</option>
        </select>

        <select id="smoothingDropdown" value="2">
          {
            Array.from({ length: 10 }, (_, i) => (
              <option value={i}>{i} smoothing</option>
            ))
          }
          {
            Array.from({ length: 5 }, (_, i) => (
              <option value={(i + 1) * 10}>{(i + 1) * 10} smoothing</option>
            ))
          }
        </select>
      </div>
    </form>
  </div>

  <div style="position: relative">
    <canvas id="usage" style="width: 100%; margin-top: 0.25em"></canvas>
    <div id="usageLegend" style="height: 6em; margin-top: 0.75em;"></div>
  </div>
</Layout>
