---
import Layout from '@layouts/Layout.astro'

const frontmatter = {"title": "Toki Pona Phrase Frequency"}
---

<script>
import type { WorkerHttpvfs } from "sql.js-httpvfs";
import type {Length} from "@utils/input"
import Chart from "chart.js/auto";

import { initDB } from "@utils/sqlite"
import { inputToQueries } from "@utils/input";
import { first_chart_build, rebuild_chart } from "@utils/chart";
import { fetchManyOccurrenceSet } from "@utils/search";
import type { Row } from '@utils/search';
import {DB_URL} from '@utils/constants';

const SAMPLE_SEARCHES = [
  // duh
  "toki, pona, toki pona",
  // phrase trends
  "tomo tawa, ilo tawa",
  // semantically identical words
  "lukin, oko, lukin + oko",
  "ale, ali, ale + ali",
  "ala, x, ala + x",
  "anu, y, anu + y",
  // word groups
  "laso, loje, walo, jelo, pimeja",
  "soweli, waso, kala, akesi, pipi",
  "sewi, poka, anpa, sinpin, monsi",
  "meli, mije, tonsi",
  "pu, ku, su",
  "sin, lukin, kin, namako, oko",
  // modifier usage
  "wawa a, wawa mute, wawa suli, wawa sewi",
  "tenpo ni, tenpo pini, tenpo kama, tenpo mute, tenpo suli, tenpo poka",
  // grammatical things
  "kepeken ilo, kepeken e ilo",
  "kin la, poka la, sama la, namako la",
  "ale la, ala la",
  // names
  "kekan, kekan san, jan kekan, mun kekan",
  "sonja, jan sonja",
];

const REL_ABS_OPTS = ["absolute", "relative"];

async function userRequest(
  worker: WorkerHttpvfs,
  chart: Chart<"line", Row[], unknown>,
  input: string,
  min_sent_len: Length,
  relative: boolean,
) {
  const queries = inputToQueries(input, min_sent_len);
  if (queries.length === 0) {
    return;
  }

  const results = await fetchManyOccurrenceSet(
    worker,
    queries,
    relative,
  );
  if (results.length === 0) {
    // TODO: tell user nothing came back
    return;
  }
  if (results.length < queries.length) {
    // TODO: tell user some (which) words were not found
  }

  await rebuild_chart(chart, results);
}

document.addEventListener("DOMContentLoaded", async () => {
  const searchBox = document.getElementById("searchBox")! as HTMLInputElement;
  searchBox.value =
    SAMPLE_SEARCHES[Math.floor(Math.random() * SAMPLE_SEARCHES.length)];

  const sentLenDropdown = document.getElementById(
    "sentLenDropdown",
  )! as HTMLInputElement;

  const relAbsDropdown = document.getElementById(
    "relAbsDropdown",
  )! as HTMLInputElement;

  relAbsDropdown.value =
    REL_ABS_OPTS[Math.floor(Math.random() * REL_ABS_OPTS.length)];

  const usageCanvas = document.getElementById("usage")! as HTMLCanvasElement;

  const worker = await initDB(DB_URL)

  const queries = inputToQueries(searchBox.value, Number(sentLenDropdown.value) as Length);
  const results = await fetchManyOccurrenceSet(
    worker,
    queries,
    relAbsDropdown.value === "relative",
  );
  const usageChart = await first_chart_build(usageCanvas, results);

  const resetZoomButton = document.getElementById(
    "resetZoom",
  )! as HTMLInputElement;
  resetZoomButton.addEventListener("click", () => {
    usageChart.resetZoom();
  });

  const form = document.getElementById("usageForm")! as HTMLFormElement;
  form.addEventListener("change", async () => {
    const queryText = searchBox.value;
    const sentLen = Number(sentLenDropdown.value);
    const relative = relAbsDropdown.value === "relative";
    // @ts-ignore
    await userRequest(worker, usageChart, queryText, sentLen, relative);
  });
});
</script>

<Layout frontmatter={frontmatter}>
  <div>
    <form id="usageForm" onsubmit="return false;" autocomplete="off">
      <div>
        <label for="searchBox"></label>
        <input
          type="text"
          id="searchBox"
          spellcheck="false"
          style="width: 65%; height: 1.6em; font-size: 18px"
        />
      </div>

      <div>
        <select id="sentLenDropdown" value="1">
          <option value="1">All sentences</option>
          <option value="2">2+ words per sentence</option>
          <option value="3">3+ words per sentence</option>
          <option value="4">4+ words per sentence</option>
          <option value="5">5+ words per sentence</option>
          <option value="6">6+ words per sentence</option>
        </select>

        <select id="relAbsDropdown" value="absolute">
          <option value="absolute">Absolute</option>
          <option value="relative">Relative</option>
        </select>
      </div>
    </form>
  </div>

  <div style="position: relative">
    <input
      type="button"
      id="resetZoom"
      value="Reset Zoom"
      style="position: absolute; top: -4.5em; right: 1em"
    />
    <canvas id="usage" style="width: 100%; margin-top: 0.25em"></canvas>
    <div id="usageLegend" style="height: 6em; margin-top: 0.75em;"></div>
  </div>
</Layout>
