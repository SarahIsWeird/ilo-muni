---
import Layout from "@layouts/Layout.astro";
import Loader from "@components/Loader.astro";
import LenDropdown from "@components/LenDropdown.astro";
import EpochPicker from "@components/EpochPicker.astro";
import { EARLIEST_YEAR, LATEST_YEAR } from "@utils/constants";

const frontmatter = { title: "Rank by Frequency" };
---

<script>
  import type { Length } from "@utils/input";
  import { getLinkuCategories } from "@utils/linku";
  import { isUCSUR } from "@utils/other";
  import { fetchRanks } from "@utils/sqlite";
  import { getRanksParams, toURLParams } from "@utils/urlparams";

  function calcWidth(maxOccurrences: number, thisOccurrences: number): number {
    // neither value can be 0
    const adjustedThisOccurrences = Math.log(thisOccurrences);
    const adjustedMaxOccurrences = Math.log(maxOccurrences);

    return adjustedThisOccurrences / adjustedMaxOccurrences;
    // return thisOccurrences / maxOccurrences;
  }

  async function updateChart(
    ranksDiv: HTMLDivElement,
    phraseLen: Length,
    minSentLen: Length,
    year: number,
  ) {
    let data = await fetchRanks(phraseLen, minSentLen, year);

    ranksDiv.innerHTML = "";
    const maxOccurrences = data[0].occurrences;
    data.forEach(async (item, index: number) => {
      const rankItem = document.createElement("div");
      rankItem.classList.add("rankItem");

      const rankText = document.createElement("span");
      rankText.textContent = `${index + 1}. ${item.term.slice(0, 30)}: ${item.occurrences}`;

      const rankBar = document.createElement("span");
      rankBar.style.width = `${calcWidth(maxOccurrences, item.occurrences) * 60}%`;
      rankBar.classList.add("rankBar");

      if (phraseLen === 1) {
        const classes = await getLinkuCategories(item.term);
        rankBar.classList.add(...classes);
      }

      if (isUCSUR(item.term)) {
        rankBar.classList.add("ucsur");
      }

      rankItem.appendChild(rankText);
      rankItem.appendChild(rankBar);
      ranksDiv.appendChild(rankItem);
    });
  }

  async function updatePage(
    ranksDiv: HTMLDivElement,
    phraseLenDropdown: HTMLInputElement,
    sentLenDropdown: HTMLInputElement,
    yearDropdown: HTMLInputElement,
    loader: HTMLSpanElement,
    event: Event | null,
  ) {
    let phraseLen = Number(phraseLenDropdown.value) as Length;
    let sentLen = Number(sentLenDropdown.value) as Length;
    const year = Number(yearDropdown.value);

    if (event?.target === phraseLenDropdown && sentLen < phraseLen) {
      sentLenDropdown.value = phraseLenDropdown.value;
      sentLen = phraseLen;
    }
    if (event?.target === sentLenDropdown && phraseLen > sentLen) {
      phraseLenDropdown.value = sentLenDropdown.value;
      phraseLen = sentLen;
    }

    loader.style.visibility = "visible";
    await updateChart(ranksDiv, phraseLen, sentLen, year);
    loader.style.visibility = "hidden";

    let usedParams: Record<string, string> = {
      phraseLen: phraseLenDropdown.value,
      minSentLen: sentLenDropdown.value,
      year: yearDropdown.value,
    };

    toURLParams(usedParams);
  }

  document.addEventListener("DOMContentLoaded", async () => {
    const sentLenDropdown = document.getElementById(
      "sentLenDropdown",
    )! as HTMLInputElement;
    const phraseLenDropdown = document.getElementById(
      "phraseLenDropdown",
    )! as HTMLInputElement;
    const yearDropdown = document.getElementById(
      "yearDropdown",
    )! as HTMLInputElement;

    const loader = document.getElementById("loader")! as HTMLSpanElement;

    let initialParams = getRanksParams();
    sentLenDropdown.value = initialParams.minSentLen;
    phraseLenDropdown.value = initialParams.phraseLen;
    yearDropdown.value = initialParams.year;

    const ranksDiv = document.getElementById("ranksDiv")! as HTMLDivElement;
    await updatePage(
      ranksDiv,
      phraseLenDropdown,
      sentLenDropdown,
      yearDropdown,
      loader,
      null,
    );

    const form = document.getElementById("ranksForm")! as HTMLFormElement;
    form.addEventListener("change", async (event) => {
      await updatePage(
        ranksDiv,
        phraseLenDropdown,
        sentLenDropdown,
        yearDropdown,
        loader,
        event,
      );
    });
  });
</script>

<Layout frontmatter={frontmatter}>
  <div>
    <div>
      <form id="ranksForm" onsubmit="return false;" autocomplete="off">
        <div>
          <LenDropdown
            maxLength={6}
            singularText="All sentences"
            pluralText="+ words per sentence"
            id="sentLenDropdown"
          />

          <LenDropdown
            maxLength={6}
            singularText="1 word"
            pluralText=" words"
            id="phraseLenDropdown"
          />
          <Loader id="loader" />
        </div>
        <!-- TODO: all time picker -->

        <div>
          <EpochPicker
            startYear={EARLIEST_YEAR}
            endYear={LATEST_YEAR - 1}
            valueYear={0}
            renderAs="date"
            allTime="true"
            id="yearDropdown"
          />
        </div>
      </form>
    </div>
    <div style="position: relative">
      <div id="ranksDiv"></div>

      <canvas id="ranks"></canvas>
      <div id="ranksLegend"></div>
    </div>
  </div>

  <div id="errorBin"></div>
</Layout>

<style is:global>
  #ranksDiv > * {
    margin-bottom: 4px;
    padding-left: 4px;
  }
  .rankItem {
    display: flex;
  }
  .rankBar {
    justify-self: right;
    margin-left: auto;
    border: 2px solid black;
    background-color: gray;
  }
  .core {
    background-color: palegoldenrod;
  }
  .common {
    background-color: skyblue;
  }
  .uncommon {
    background-color: palevioletred;
  }
  .obscure {
    background-color: mediumpurple;
  }
  .sandbox {
    background-color: lightgray;
  }
  .ucsur {
    background-color: lightgreen;
  }

  /* .pu { */
  /*   background-color: lightyellow; */
  /* } */
  /* .ku-suli { */
  /*   background-color: lightgreen; */
  /* } */
  /* .ku-lili { */
  /*   background-color: lightgray; */
  /* } */
</style>
